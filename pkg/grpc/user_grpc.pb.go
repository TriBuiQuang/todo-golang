// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserReaderServiceClient is the client API for UserReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserReaderServiceClient interface {
	GetAllUsers(ctx context.Context, in *GetAllUsersReq, opts ...grpc.CallOption) (*GetAllUsersRes, error)
	GetSingleUser(ctx context.Context, in *GetSingleUserReq, opts ...grpc.CallOption) (*GetSingleUserRes, error)
}

type userReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserReaderServiceClient(cc grpc.ClientConnInterface) UserReaderServiceClient {
	return &userReaderServiceClient{cc}
}

func (c *userReaderServiceClient) GetAllUsers(ctx context.Context, in *GetAllUsersReq, opts ...grpc.CallOption) (*GetAllUsersRes, error) {
	out := new(GetAllUsersRes)
	err := c.cc.Invoke(ctx, "/todo.UserReaderService/GetAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReaderServiceClient) GetSingleUser(ctx context.Context, in *GetSingleUserReq, opts ...grpc.CallOption) (*GetSingleUserRes, error) {
	out := new(GetSingleUserRes)
	err := c.cc.Invoke(ctx, "/todo.UserReaderService/GetSingleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserReaderServiceServer is the server API for UserReaderService service.
// All implementations must embed UnimplementedUserReaderServiceServer
// for forward compatibility
type UserReaderServiceServer interface {
	GetAllUsers(context.Context, *GetAllUsersReq) (*GetAllUsersRes, error)
	GetSingleUser(context.Context, *GetSingleUserReq) (*GetSingleUserRes, error)
	mustEmbedUnimplementedUserReaderServiceServer()
}

// UnimplementedUserReaderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserReaderServiceServer struct {
}

func (UnimplementedUserReaderServiceServer) GetAllUsers(context.Context, *GetAllUsersReq) (*GetAllUsersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedUserReaderServiceServer) GetSingleUser(context.Context, *GetSingleUserReq) (*GetSingleUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleUser not implemented")
}
func (UnimplementedUserReaderServiceServer) mustEmbedUnimplementedUserReaderServiceServer() {}

// UnsafeUserReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserReaderServiceServer will
// result in compilation errors.
type UnsafeUserReaderServiceServer interface {
	mustEmbedUnimplementedUserReaderServiceServer()
}

func RegisterUserReaderServiceServer(s grpc.ServiceRegistrar, srv UserReaderServiceServer) {
	s.RegisterService(&UserReaderService_ServiceDesc, srv)
}

func _UserReaderService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReaderServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.UserReaderService/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReaderServiceServer).GetAllUsers(ctx, req.(*GetAllUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReaderService_GetSingleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReaderServiceServer).GetSingleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.UserReaderService/GetSingleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReaderServiceServer).GetSingleUser(ctx, req.(*GetSingleUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserReaderService_ServiceDesc is the grpc.ServiceDesc for UserReaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserReaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.UserReaderService",
	HandlerType: (*UserReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllUsers",
			Handler:    _UserReaderService_GetAllUsers_Handler,
		},
		{
			MethodName: "GetSingleUser",
			Handler:    _UserReaderService_GetSingleUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// UserWriteServiceClient is the client API for UserWriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserWriteServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserRes, error)
	EditUser(ctx context.Context, in *EditUserReq, opts ...grpc.CallOption) (*EditUserRes, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserRes, error)
}

type userWriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserWriteServiceClient(cc grpc.ClientConnInterface) UserWriteServiceClient {
	return &userWriteServiceClient{cc}
}

func (c *userWriteServiceClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserRes, error) {
	out := new(CreateUserRes)
	err := c.cc.Invoke(ctx, "/todo.UserWriteService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWriteServiceClient) EditUser(ctx context.Context, in *EditUserReq, opts ...grpc.CallOption) (*EditUserRes, error) {
	out := new(EditUserRes)
	err := c.cc.Invoke(ctx, "/todo.UserWriteService/EditUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWriteServiceClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserRes, error) {
	out := new(DeleteUserRes)
	err := c.cc.Invoke(ctx, "/todo.UserWriteService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserWriteServiceServer is the server API for UserWriteService service.
// All implementations must embed UnimplementedUserWriteServiceServer
// for forward compatibility
type UserWriteServiceServer interface {
	CreateUser(context.Context, *CreateUserReq) (*CreateUserRes, error)
	EditUser(context.Context, *EditUserReq) (*EditUserRes, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserRes, error)
	mustEmbedUnimplementedUserWriteServiceServer()
}

// UnimplementedUserWriteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserWriteServiceServer struct {
}

func (UnimplementedUserWriteServiceServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserWriteServiceServer) EditUser(context.Context, *EditUserReq) (*EditUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUser not implemented")
}
func (UnimplementedUserWriteServiceServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserWriteServiceServer) mustEmbedUnimplementedUserWriteServiceServer() {}

// UnsafeUserWriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserWriteServiceServer will
// result in compilation errors.
type UnsafeUserWriteServiceServer interface {
	mustEmbedUnimplementedUserWriteServiceServer()
}

func RegisterUserWriteServiceServer(s grpc.ServiceRegistrar, srv UserWriteServiceServer) {
	s.RegisterService(&UserWriteService_ServiceDesc, srv)
}

func _UserWriteService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWriteServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.UserWriteService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWriteServiceServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWriteService_EditUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWriteServiceServer).EditUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.UserWriteService/EditUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWriteServiceServer).EditUser(ctx, req.(*EditUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWriteService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWriteServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.UserWriteService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWriteServiceServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserWriteService_ServiceDesc is the grpc.ServiceDesc for UserWriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserWriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.UserWriteService",
	HandlerType: (*UserWriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserWriteService_CreateUser_Handler,
		},
		{
			MethodName: "EditUser",
			Handler:    _UserWriteService_EditUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserWriteService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
