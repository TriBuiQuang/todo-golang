// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: task.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskReaderServiceClient is the client API for TaskReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskReaderServiceClient interface {
	GetAllTasks(ctx context.Context, in *GetAllTasksReq, opts ...grpc.CallOption) (*GetAllTasksRes, error)
	GetSingleTask(ctx context.Context, in *GetSingleTaskReq, opts ...grpc.CallOption) (*GetSingleTaskRes, error)
}

type taskReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskReaderServiceClient(cc grpc.ClientConnInterface) TaskReaderServiceClient {
	return &taskReaderServiceClient{cc}
}

func (c *taskReaderServiceClient) GetAllTasks(ctx context.Context, in *GetAllTasksReq, opts ...grpc.CallOption) (*GetAllTasksRes, error) {
	out := new(GetAllTasksRes)
	err := c.cc.Invoke(ctx, "/todo.TaskReaderService/GetAllTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskReaderServiceClient) GetSingleTask(ctx context.Context, in *GetSingleTaskReq, opts ...grpc.CallOption) (*GetSingleTaskRes, error) {
	out := new(GetSingleTaskRes)
	err := c.cc.Invoke(ctx, "/todo.TaskReaderService/GetSingleTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskReaderServiceServer is the server API for TaskReaderService service.
// All implementations must embed UnimplementedTaskReaderServiceServer
// for forward compatibility
type TaskReaderServiceServer interface {
	GetAllTasks(context.Context, *GetAllTasksReq) (*GetAllTasksRes, error)
	GetSingleTask(context.Context, *GetSingleTaskReq) (*GetSingleTaskRes, error)
	mustEmbedUnimplementedTaskReaderServiceServer()
}

// UnimplementedTaskReaderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskReaderServiceServer struct {
}

func (UnimplementedTaskReaderServiceServer) GetAllTasks(context.Context, *GetAllTasksReq) (*GetAllTasksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTasks not implemented")
}
func (UnimplementedTaskReaderServiceServer) GetSingleTask(context.Context, *GetSingleTaskReq) (*GetSingleTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleTask not implemented")
}
func (UnimplementedTaskReaderServiceServer) mustEmbedUnimplementedTaskReaderServiceServer() {}

// UnsafeTaskReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskReaderServiceServer will
// result in compilation errors.
type UnsafeTaskReaderServiceServer interface {
	mustEmbedUnimplementedTaskReaderServiceServer()
}

func RegisterTaskReaderServiceServer(s grpc.ServiceRegistrar, srv TaskReaderServiceServer) {
	s.RegisterService(&TaskReaderService_ServiceDesc, srv)
}

func _TaskReaderService_GetAllTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskReaderServiceServer).GetAllTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TaskReaderService/GetAllTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskReaderServiceServer).GetAllTasks(ctx, req.(*GetAllTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskReaderService_GetSingleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskReaderServiceServer).GetSingleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TaskReaderService/GetSingleTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskReaderServiceServer).GetSingleTask(ctx, req.(*GetSingleTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskReaderService_ServiceDesc is the grpc.ServiceDesc for TaskReaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskReaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.TaskReaderService",
	HandlerType: (*TaskReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllTasks",
			Handler:    _TaskReaderService_GetAllTasks_Handler,
		},
		{
			MethodName: "GetSingleTask",
			Handler:    _TaskReaderService_GetSingleTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}

// TaskWriteServiceClient is the client API for TaskWriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskWriteServiceClient interface {
	CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskRes, error)
	DeleteTask(ctx context.Context, in *DeleteTaskReq, opts ...grpc.CallOption) (*DeleteTaskRes, error)
}

type taskWriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskWriteServiceClient(cc grpc.ClientConnInterface) TaskWriteServiceClient {
	return &taskWriteServiceClient{cc}
}

func (c *taskWriteServiceClient) CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskRes, error) {
	out := new(CreateTaskRes)
	err := c.cc.Invoke(ctx, "/todo.TaskWriteService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskWriteServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskReq, opts ...grpc.CallOption) (*DeleteTaskRes, error) {
	out := new(DeleteTaskRes)
	err := c.cc.Invoke(ctx, "/todo.TaskWriteService/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskWriteServiceServer is the server API for TaskWriteService service.
// All implementations must embed UnimplementedTaskWriteServiceServer
// for forward compatibility
type TaskWriteServiceServer interface {
	CreateTask(context.Context, *CreateTaskReq) (*CreateTaskRes, error)
	DeleteTask(context.Context, *DeleteTaskReq) (*DeleteTaskRes, error)
	mustEmbedUnimplementedTaskWriteServiceServer()
}

// UnimplementedTaskWriteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskWriteServiceServer struct {
}

func (UnimplementedTaskWriteServiceServer) CreateTask(context.Context, *CreateTaskReq) (*CreateTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskWriteServiceServer) DeleteTask(context.Context, *DeleteTaskReq) (*DeleteTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskWriteServiceServer) mustEmbedUnimplementedTaskWriteServiceServer() {}

// UnsafeTaskWriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskWriteServiceServer will
// result in compilation errors.
type UnsafeTaskWriteServiceServer interface {
	mustEmbedUnimplementedTaskWriteServiceServer()
}

func RegisterTaskWriteServiceServer(s grpc.ServiceRegistrar, srv TaskWriteServiceServer) {
	s.RegisterService(&TaskWriteService_ServiceDesc, srv)
}

func _TaskWriteService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskWriteServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TaskWriteService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskWriteServiceServer).CreateTask(ctx, req.(*CreateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskWriteService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskWriteServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TaskWriteService/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskWriteServiceServer).DeleteTask(ctx, req.(*DeleteTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskWriteService_ServiceDesc is the grpc.ServiceDesc for TaskWriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskWriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.TaskWriteService",
	HandlerType: (*TaskWriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskWriteService_CreateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskWriteService_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
